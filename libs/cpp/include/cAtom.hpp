#pragma once

#include <string>
#include <vector>
#include <map>
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <array>

#include "cPosition.hpp"


// Class for atoms

class Atom {

private:
    
    // this static members are the same for all instances of the class
    static const std::map<std::string, float> radii_vdw_;
    
    static const std::map<std::string, std::map<std::string, std::string> > atom_types_; // first key is a name of typization, second key is atom name, second value is the corresponding typization
    static const std::map<std::string, std::map<std::string, std::string> > set_atom_types();
    
    static const std::map<std::string, std::vector<std::string> > channel_names_; // first key is a name of typization, second is a vector of corresponding channels
    static const std::map< std::string, std::vector<std::string> > set_channel_names();

	//static const std::map<std::string, std::map<std::string, float> > lj_grid_;
	//static const std::vector<std::vector<float> > lj_grid_;
    
	// Atom properties taken from pdb file
	int serial_id_;							// Atom serial number
	int residue_id_;						// Residue sequence number
	char alternative_location_;				// Alternative location indicator
	std::string name_;					    // Atom name
	std::string element_;				    // Element symbol
	std::string residue_name_;				// Residue name
	Position<float> position_;				// Orthogonal coordinates for (x, y, z) in Angstrom
	float occupancy_;					    // Occupancy
	float temperature_factor_;				// Temperature factor
	char chain_id_;							// Chain identifier 
	std::string record_name_;				// "ATOM  " or "HETATM" record name
    std::string type_;
	std::string charge_;

    
    /*
	// Atom properties taken from pdbqt file generated by prepare_receptor4.py script
	float charge_;						// charge taken from generated pdbqt file generated by prepare_receptor4.py script
	std::string type_;					// autodock type taken fron generated pdbqt file generated by prepare_receptor4.py script

	// Residue properties computed by VMD
	float sasa_;						// solvent accessible surface area, computed by VMD script
	float energy_electrostatic_, energy_vdw_;		// electrostatic and VanDerWaals energies computed by namdenergy command in VMD

	// Evolutional residue descriptors computed using hhblits msa
	std::vector<float> descriptor_evolution_;	// vector of 4 floats with for evolutional descriptors 
												// { position conservatism, position entropy, amino acid entropy, sequential position entropy }. 

    */
    void init();                        // setting variables zeros


public:

	// Constructors
	Atom();
	Atom(const std::string& element, const Position<float>& p);								    // Constructs Atom with string element=Element, Position
	Atom(const std::string& element, const std::string &name, const Position<float>& p);				// Constructs Atom with string element=Element, string atom_name=Name, Position
	Atom(const std::string& element, const std::string& name, const int serial, const Position<float>& p);	// Constructs Atom with string element=Element, string atom_name=Name, int serial=Serial, Position
	~Atom();

	// Setting or getting atom properties

	void	set_element(const std::string&);				// Sets the atom's element symbol
	const	std::string& get_element() const;		// Returns the atom's element symbol

	void	set_name(const std::string&);					// Sets the atom's full name
	const	std::string& get_name() const;			// Returns the atom's full name

	void	set_serial_id(const int);							// Sets the atom's serial number
	const	int& get_serial_id() const;					// Returns the atom's serial number

	void	set_residue_name(const std::string&);				// Sets the atom's residue name
	const	std::string& get_residue_name() const;		// Returns the atom's residue name

	void	set_position(const Position<float>& p);			// Sets the position {x, y, z}
	const	Position<float>& get_position() const;			// Returns the position Position({x, y, z})

	void	set_residue_id(const int);					// Sets the atom's residue sequence number
	const	int& get_residue_id() const;			// Returns the atom's residue sequence number

	void	set_occupancy(const float&);					// Sets the atom's occupancy
	const	float& get_occupancy() const;			// Returns the atom's occupancy
    
	void	set_temperature_factor(const float&);					// Sets the atom's temperature factor
	const	float& get_temperature_factor() const;			// Returns the atom's temperature factor

	void	set_chain_id(const char);							// Sets the atom's chainID
	const	char& get_chain_id() const;					// Returns the atom's chainID

	void	set_record_name(const std::string&);				// Sets record name
	const	std::string& get_record_name() const;		// Returns record name ("ATOM  " or "HETATM")
    
	void	set_alternative_location(const char);					// Sets the atom's alternative location identifier
	const	char& get_alternative_location() const;			// Returns the atom's alternative location identifier

	void	set_charge(const std::string&);						// Sets the atom's charge
	const	std::string& get_charge() const;				// Returns the atom's charge

	void	set_type(const std::string&);					// Sets the atom's  type
	const	std::string& get_type() const;			// Returns the atom's  type
    
    float get_radius_vdw() const;                            // Returns VanDerWaals radius (if H, C, N, O or S)
    //float get_mass() const;
    
    static const std::vector<std::string> get_channel_names(const std::string& typization);
    //std::vector<std::string> get_channel_names(const std::string& typization);
    
    void assign_typization(const std::string& typization);  // set types of atoms and channels, e.g. ITSCORE typization
    double calculate_atomic_density(const Position<float>& p, const float& squared_cutoff = 4.0) const; // calculates atomic density
    double calculate_atomic_density(const float& x, const float& y, const float& z, const float& squared_cutoff = 4.0) const;

    double exponent_approximation(const double& x) const; // function to compute exponent TODO: check how fast is it as compared to exp
    

    /*
	void	set_sasa(double);						// Sets solvent accessible surface area of the residue
	const	double& sasa() const;				// Returns solvent accessible surface area of the residue

	void	set_energy_electrostatic(float);					// Sets electrostatical energy of the residue
	const	float& energy_electrostatic() const;			// Returns electrostatical energy of the residue
	void	set_energy_vdw(float);					// Sets VanDerWaals energy of the residue
	const	float& energy_vdw() const;			// Returns VanDerWaals energy of the residue
	
	void	set_descriptor_evolution(std::vector<float>);	// Sets evolutional descriptors, vector of floats of length 4
	std::vector<float> descriptor_evolution() const;	// Returns evolutional descriptors, vector of floats of length 4
    */
    
    friend std::ostream& operator <<(std::ostream& os, const Atom& a);
};




